#
# 编译主程序,请勿修改文件名称（compile.yml）
#


name: 编译主程序
on:
  workflow_dispatch:
    inputs:
      REPO_BRANCH:
        description: 'iStoreOS'
        required: true
        default: 'istoreos-22.03'
        type: choice
        options:
          - 'istoreos-22.03'
      CONFIG_FILE:
        description: '请选择配置文件'
        required: true
        default: 'x86'
        type: choice
        options:
          - 'x86'
      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: false
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: true
        type: boolean
      UPLOAD_BIN_DIR:
        description: '上传 bin 目录。即包含所有 ipk 文件和固件的目录到 Github Artifacts'
        required: false
        default: true
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Github Releases'
        required: false
        default: false
        type: boolean
      CACHEWRTBUILD_SWITCH:
        description: '缓存加速编译'
        required: false
        default: true
        type: boolean

env:
  GITHUB_LINK: https://github.com/${{github.repository}}
  GIT_ACTOR: ${{github.actor}}
  GIT_REPOSITORY: ${{github.repository}}
  RUN_NUMBER: ${{github.run_number}}
  RUN_WORKFLOW: ${{github.workflow}}
  TZ: Asia/Shanghai
  DIY_WORK: istoreos2203
  REPO_URL: https://github.com/istoreos/istoreos

jobs:
  build:
    name: 编译 "${{matrix.target}}"
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    env:
      FOLDER_NAME: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [iStoreOS]

    steps:    
    - name: 准备结束
      uses: actions/checkout@v4

    - name: 拉取自定义文件
      run: |
        cd ${GITHUB_WORKSPACE}
        bash <(curl -fsSL https://raw.githubusercontent.com/asxs123/ceshi/123/first.sh)

    - name: 释放Ubuntu磁盘空间
      uses: endersonmenezes/free-disk-space@v2
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
        remove_packages_one_command: true
        remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
        testing: false
        
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source ${GITHUB_WORKSPACE}/build/common/common.sh && Diy_update
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{ env.DIY_WORK }}
        sudo chown ${USER}:${GROUPS} /${{ env.DIY_WORK }}

    - name: 下载"${{matrix.target}}"源码
      working-directory: /${{ env.DIY_WORK }}
      run: |
        git clone -b "${{ github.event.inputs.REPO_BRANCH }}" --single-branch "${REPO_URL}" openwrt
        ln -sf /${{ env.DIY_WORK }}/openwrt ${GITHUB_WORKSPACE}/openwrt
        cp -Rf ${GITHUB_WORKSPACE}/build ${GITHUB_WORKSPACE}/openwrt/build
        chmod -R +x ${GITHUB_WORKSPACE}/openwrt/build
 
    - name: 加载自定义 feeds
      env:
        FEEDS_CONF: openwrt/build/common/iStoreOS/feeds.conf.default
        DIY_P1_SH: openwrt/build/common/iStoreOS/diy-part1.sh
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 生成"${{matrix.target}}"配置文件
      env:
        CONFIG_FILE_PATH: openwrt/build/common/iStoreOS/${{ github.event.inputs.CONFIG_FILE }}.config
        DIY_P2_SH: openwrt/build/common/iStoreOS/diy-part2.sh
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH远程连接（make menuconfig）
      if: github.event.inputs.SSH_ACTION == 'true'
      uses: mxschmitt/action-tmate@v3.16
        
    - name: 缓存加速
      if: github.event.inputs.CACHEWRTBUILD_SWITCH == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "${{matrix.target}}_${{ github.event.inputs.CONFIG_FILE }}"
        prefix: ${{ github.workspace }}/openwrt
        clean: 'true'
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 上传配置文件
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.CONFIG_FILE }}.config
        path: openwrt/.config

    # - name: 上传根文件夹
    #   uses: actions/upload-artifact@main
    #   with:
    #     name: istoreos Source
    #     path: ${{ github.workspace }}
    
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "date=$(date "+%Y%m%d%H%M%S")" >> ${GITHUB_ENV}
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_BIN_DIR == 'true'
      with:
        name: ${{matrix.target}}_${{ github.event.inputs.CONFIG_FILE }}_${{ env.date }}
        path: openwrt/bin

    - name: 整理固件文件夹
      id: organize
      if: github.event.inputs.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: 上传固件在 github Artifacts
      if: steps.compile.outcome == 'success' && github.event.inputs.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ github.event.inputs.REPO_BRANCH }}-${{ github.event.inputs.CONFIG_FILE }}-firmware-${{ env.date }}
        path: ${{ env.FIRMWARE }}
    
    - name: 发布固件
      if: steps.compile.outcome == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true'
      uses: ncipollo/release-action@v1
      with:
        name: ${{ github.event.inputs.REPO_BRANCH }}-${{ github.event.inputs.CONFIG_FILE }}
        tag: a${{ env.date }}
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        artifacts: "${{ env.FIRMWARE }}/*"