# This is a basic workflow to help you get started with Actions

name: Build OpenWrt

# 控制工作流何时运行
on:
  # 允许您从“操作”选项卡手动运行此工作流
  workflow_dispatch:
    inputs:
      REPO_BRANCH:
        description: '源码分支'
        required: true
        default: 'master'
        type: choice
        options:
          - 'master'
      CONFIG_FILE:
        description: '请选择配置文件'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: false
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: true
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Github Releases'
        required: false
        default: false
        type: boolean
      CACHEWRTBUILD_SWITCH:
        description: '缓存加速编译'
        required: false
        default: true
        type: boolean
      COMPILATION_INFORMATION:
        description: '是否显示编译信息'
        required: false
        default: true
        type: boolean

env:
  # 源码仓库地址
  REPO_URL: https://github.com/coolsnowwolf/lede
  # 自定义feeds.conf.default文件名
  # 上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false
  UPLOAD_BIN_DIR: true
  # 时区设置
  TZ: Asia/Shanghai

# 工作流运行由一个或多个作业组成，这些作业可以按顺序或并行运行
jobs:
  # 此工作流包含一个名为“构建”的作业
  build:
    # 作业将在其上运行的运行程序的类型
    runs-on: ubuntu-latest
    name: 启动openwrt"-${{ github.event.inputs.REPO_BRANCH }}"编译

    # 步骤表示将作为作业的一部分执行的一系列任务
    steps:
    # 在$GITHUB_WORKSPACE下签出您的存储库,以便您的工作可以访问它
    - name: 准备结束
      uses: actions/checkout@v4

    - name: 拉取自定义文件
      run: |
        cd ${GITHUB_WORKSPACE}
        bash <(curl -fsSL https://raw.githubusercontent.com/asxs123/ceshi/123/custom/first.sh)
        # source ${GITHUB_WORKSPACE}/build/${FOLDER_NAME}/settings.ini
        # source ${GITHUB_WORKSPACE}/build/${{ env.FOLDER_NAME }}/common.sh && Diy_menu1

    - name: 释放Ubuntu磁盘空间
      uses: endersonmenezes/free-disk-space@v2
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "azure-cli google-cloud-cli microsoft-edge-stable google-chrome-stable firefox postgresql* temurin-* *llvm* mysql* dotnet-sdk-*"
        remove_packages_one_command: true
        remove_folders: "/usr/share/swift /usr/share/miniconda /usr/share/az* /usr/share/glade* /usr/local/lib/node_modules /usr/local/share/chromium /usr/local/share/powershell"
        testing: false

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source ${GITHUB_WORKSPACE}/build/openwrt/common.sh && Diy_update
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ github.event.inputs.REPO_BRANCH }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cp -Rf /workdir/build ${GITHUB_WORKSPACE}/openwrt/build
        chmod -R +x ${GITHUB_WORKSPACE}/openwrt/build

    - name: 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && cp -r $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/$CONFIG_FILE
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH 连接到 Actions
      if: github.event.inputs.SSH_ACTION == 'true'
      uses: P3TERX/ssh2actions@v1.0.0

    - name: 缓存加速
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: "openwrt_x86"
        prefix: ${{ github.workspace }}/openwrt

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.FILE_DATE }}
        path: ${GITHUB_WORKSPACE}

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: github.event.inputs.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H.%M")"
        touch release.txt
        echo "
        💻 架构: ${{ github.event.inputs.CONFIG_FILE }}

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ github.event.inputs.REPO_BRANCH }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: 10.0.0.1

        👤 用户名: root

        🔒 密码: password " >> release.txt
        echo "::set-output name=status::success"

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 1

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: github.event.inputs.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 4
        delete_tags: true